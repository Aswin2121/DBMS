Consider the following Database Schema
1. Find all employees who locate in the location with the id 1700.
2. Find all employees who do not locate at the location 1700.
3. Finds the employees who have the highest salary.
4. Finds all employees who salaries are greater than the average salary of all employees.
5. Finds all departments (Department Id, Name) which have at least one employee with
the salary is greater than 10,000.
6. Finds all departments (Department Id, Name) that do not have any employee with the
salary greater than 10,000.
7. Finds all employees whose salaries are greater than the lowest salary of every
department.
8. Finds all employees whose salaries are greater than or equal to the highest salary of
every department.
9. Calculate the average of average salary of departments. (Hint: SQL subquery in the
FROM clause)
10. Finds the salaries of all employees, their average salary, and the difference between the
salary of each employee and the average salary. (Hint: SQL Subquery in the SELECT
clause)
11. Finds all employees whose salary is higher than the average salary of the employees in
their departments. (Hint : Use Correlated Subquery).
12. Returns all employees who have no dependents.
13. Display first name, last name, department name of employees of the Department with
id 1, 2 and 3.
14. Display the first name, last name, job title, and department name of employees who
work in department with id 1, 2, and 3 and salary greater than 10000.
15. Display Department name, street address, postal code, country name and region name
of all departments.
16. Write a SQL query to find out which employees have or do not have a department.
Return first name, last name, department ID, department name.
17. Write a SQL query to find those employees whose first name contains the letter ‘Z’.
Return first name, last name, department, city, and state province.
18. Write a SQL query to find all departments, including those without employees Return
first name, last name, department ID, department name


ChatGPT
Here are the SQL queries for each of the tasks:

sql
Copy code
SELECT * FROM employees WHERE location_id = 1700;

sql
Copy code

2. ```sql
SELECT * FROM employees WHERE location_id != 1700;
sql
Copy code
SELECT * FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);

sql
Copy code

4. ```sql
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
sql
Copy code
SELECT departments.department_id, departments.department_name
FROM departments
WHERE EXISTS (SELECT * FROM employees WHERE employees.department_id = departments.department_id AND salary > 10000);

sql
Copy code

6. ```sql
SELECT departments.department_id, departments.department_name 
FROM departments 
WHERE NOT EXISTS (SELECT * FROM employees WHERE employees.department_id = departments.department_id AND salary > 10000);
sql
Copy code
SELECT *
FROM employees
WHERE salary > (SELECT MIN(salary) FROM employees GROUP BY department_id);

sql
Copy code

8. ```sql
SELECT * 
FROM employees 
WHERE salary >= (SELECT MAX(salary) FROM employees GROUP BY department_id);
sql
Copy code
SELECT AVG(avg_salary)
FROM (SELECT AVG(salary) as avg_salary FROM employees GROUP BY department_id) as department_avg_salary;

sql
Copy code

10. ```sql
SELECT first_name, last_name, salary, 
(SELECT AVG(salary) FROM employees) as avg_salary, 
salary - (SELECT AVG(salary) FROM employees) as salary_difference 
FROM employees;
nd all employees who locate in the location with the id 1700.
2. Find all employees who do not locate at the location 1700.
3. Finds the employees who have the highest salary.
4. Finds all employees who salaries are greater than the average salary of all employees.
5. Finds all departments (Department Id, Name) which have at least one employee with
the salary is greater than 10,000.
6. Finds all departments (Department Id, Name) that do not have any employee with the
salary greater than 10,000.
7. Finds all employees whose salaries are greater than the lowest salary of every
department.
8. Finds all employees whose salaries are greater than or equal to the highest salary of
every department.
9. Calculate the average of average salary of departments. (Hint: SQL subquery in the
FROM clause)
10. Finds the salaries of all employees, their average salary, and the difference between the
salary of each employee and the average salary. (Hint: SQL Subquery in the SELECT
clause)
11. Finds all employees whose salary is higher than the average salary of the employees in
their departments. (Hint : Use Correlated Subquery).
12. Returns all employees who have no dependents.
13. Display first name, last name, department name of employees of the Department with
id 1, 2 and 3.
14. Display the first name, last name, job title, and department name of employees who
work in department with id 1, 2, and 3 and salary greater than 10000.
15. Display Department name, street address, postal code, country name and region name
of all departments.
16. Write a SQL query to find out which employees have or do not have a department.
Return first name, last name, department ID, department name.
17. Write a SQL query to find those employees whose first name contains the letter ‘Z’.
Return first name, last name, department, city, and state province.
18. Write a SQL query to find all departments, including those without employees Return
first name, last name, department ID, department name
19. Write a SQL query to find the employees and their managers. . Those managers do not
work under any manager also appear in the list. Return the first name of the employee
and manager.
20. Write a SQL query to find the employees who work in the same department as the
employee with the last name Taylor. Return first name, last name and department ID.
21. Write a SQL query to calculate the difference between the maximum salary of the job
and the employee's salary. Return job title, employee name, and salary difference.
22. Write a SQL query to calculate the average salary, the number of employees receiving
commissions in that department. Return department name, average salary and number
of employees of all departments.
23. Create a view which contains employee name, employee id, phone number, job title,
department name, manager name of employees belongs to department whose
location is in ‘Delhi’ and display the details,
24. Use the above created view to obtain the names of employees whose job title is
‘Manager’ and department is ‘Finance’.
25. Check whether it is possible to update the phone number of employee whose first
name is ‘Smith’ by using the above created view.
26. Display the details of employee who have no dependents.
27. Display the details of employee who manager id is 101 or 201. (Use Union Clause)
28. Display the details of employees who have at least one dependent.




Finds all departments (Department Id, Name) that do not have any employee with the
salary greater than 10,000.
SQL:SELECT d.department_id, d.department_name FROM departments d WHERE
NOT EXISTS ( SELECT 1 FROM Employees e WHERE e.department_id =
d.department_id AND e.salary > 10000 );
Output:
7. Finds all employees whose salaries are greater than the lowest salary of every
Department.
SQL: SELECT e.* FROM Employees e JOIN ( SELECT department_id, MIN(salary)
as min_salary FROM Employees GROUP BY department_id) AS dept_min_salary
ON e.department_id = dept_min_salary.department_id WHERE e.salary >
dept_min_salary.min_salary;
Output:
8. Finds all employees whose salaries are greater than or equal to the highest salary of
every department.
SQL:SELECT e.* FROM Employees e JOIN ( SELECT department_id, MAX(salary)
as max_salary FROM Employees GROUP BY department_id) AS dept_max_salary
ON e.department_id = dept_max_salary.department_id WHERE e.salary >=
dept_max_salary.max_salary;
Output:
26
9. Calculate the average of average salary of departments. (Hint: SQL subquery in the
FROM clause)
SQL: SELECT AVG(dept_avg_salary) AS overall_avg_salary FROM (SELECT
department_id, AVG(salary) AS dept_avg_salary FROM Employees GROUP BY
department_id) AS dept_avg_salary_subquery;
Output:
10. Finds the salaries of all employees, their average salary, and the difference between the
salary of each employee and the average salary. (Hint: SQL Subquery in the SELECT
clause)
SQL: SELECT employee_id, first_name, last_name, salary, (SELECT
ROUND(AVG(salary), 0) FROM Employees) average_salary, salary -(SELECT
ROUND(AVG(salary), 0)FROM Employees)difference FROM Employees ORDER BY
first_name , last_name;
Output:
11. Finds all employees whose salary is higher than the average salary of the employees in
their departments. (Hint : Use Correlated Subquery).
SQL: SELECT e.* FROM Employees e WHERE e.salary > (SELECT AVG(e2.salary)
FROM Employees e2 WHERE e2.department_id = e.department_id);



12.Returns all employees who have no dependents.
SQL: select * from employees where employee_id not in (select employee_id from
dependents);


13. Display first name, last name, department name of employees of the Department with
id 1, 2 and 3.
SQL: select e.first_name,e.last_name,d.department_name from employees e JOIN
departments d ON e.department_id=d.department_id where e.department_id IN
('1','2','3');


14. Display the first name, last name, job title, and department name of employees who
work in department with id 1, 2, and 3 and salary greater than 10000.
SQL: select e.first_name,e.last_name,d.department_name,j.job_title from jobs j
JOIN employees e ON j.job_id=e.job_id JOIN departments d ON
e.department_id=d.department_id where e.department_id IN ('1','2','3') AND
e.salary>10000;


15. Display Department name, street address, postal code, country name and region name
of all departments.
SQL: SELECT d.department_name, l.street_address, l.postal_code,
c.country_name, r.region_name FROM departments d JOIN locations l ON
d.location_id=l.location_id JOIN countries c ON l.country_id = c.country_id JOIN
regions r ON c.region_id = r.region_id;


16. Write a SQL query to find out which employees have or do not have a department.
Return first name, last name, department ID, department name.
SQL: SELECT e.first_name, e.last_name, d.department_id, d.department_name
FROM employees e LEFT JOIN departments d ON e.department_id =
d.department_id;


17. Write a SQL query to find those employees whose first name contains the letter ‘Z’.
Return first name, last name, department, city, and state province.
SQL: SELECT e.first_name, e.last_name, d.department_name, l.city,
l.state_province FROM employees e JOIN departments d ON e.department_id =
d.department_id JOIN location l ON d.location_id=l.location_id WHERE e.first_name
LIKE '%Z%';


18. Write a SQL query to find all departments, including those without employees Return
first name, last name, department ID, department name
SQL: SELECT e.first_name, e.last_name, d.department_id, d.department_name
FROM departments d LEFT JOIN employees e ON d.department_id =
e.department_id;


19. Write a SQL query to find the employees and their managers. . Those managers do not
work under any manager also appear in the list. Return the first name of the employee
and manager.
SQL: SELECT e.first_name AS employee_first_name, m.first_name AS
manager_first_name FROM employees e LEFT JOIN employees m ON
e.manager_id = m.employee_id;


20. Write a SQL query to find the employees who work in the same department as the
employee with the last name Taylor. Return first name, last name and department ID.
SQL: SELECT e.first_name, e.last_name, e.department_id FROM employees e
INNER JOIN employees t ON e.department_id = t.department_id WHERE
t.last_name = 'Taylor';


21. Write a SQL query to calculate the difference between the maximum salary of the job
and the employee's salary. Return job title, employee name, and salary difference.
SQL: SELECT j.job_title, CONCAT(e.first_name, ' ', e.last_name) AS
employee_name, (j.max_salary - e.salary) AS salary_difference FROM employees e
INNER JOIN jobs j ON e.job_id = j.job_id;


22. Write a SQL query to calculate the average salary, the number of employees in that
department. Return department name, average salary and number
of employees of all departments.
SQL: SELECT d.department_name AS department_name, AVG(e.salary) AS
average_salary, COUNT(e.department_id) AS number_of_employees FROM
departments d LEFT JOIN employees e ON d.department_id = e.department_id
GROUP BY d.department_name;


23.Create a view which contains employee name, employee id, phone number, job title,
department name, manager name of employees belongs to department whose
location is in ‘Delhi’ and display the details,
SQL: CREATE VIEW v_employee_details AS SELECT e.first_name, e.last_name,
e.employee_id, e.phone_number, j.job_title, d.department_name,
CONCAT(m.first_name, ' ', m.last_name) AS manager_name FROM employees e
INNER JOIN jobs j ON e.job_id = j.job_id INNER JOIN departments d ON
e.department_id = d.department_id LEFT JOIN employees m ON e.manager_id =
m.employee_id WHERE d.location_id IN (SELECT location_id FROM locations
WHERE city = 'DELHI');
select * from v_employee_details;



24.Use the above created view to obtain the names of employees whose job title is
‘Manager’ and department is ‘Finance’.
SQL: SELECT first_name, last_name FROM v_employee_details WHERE job_title =
'Manager' AND department_name = 'Finance';


25.Check whether it is possible to update the phone number of employee whose first
name is ‘Smith’ by using the above created view.
SQL: UPDATE v_employee_details SET phone_number = 6985741230 WHERE
first_name = 'Smith';


Note: It is not possible to update the data from multiple table view in MySQL. It is
possible in MariaDB. Only the Single table view can be updated in MySQL.
26.Display the details of employee who have no dependents.
SQL: SELECT e.employee_id, e.first_name, e.last_name, e.phone_number FROM
employees e LEFT JOIN dependents dep ON e.employee_id = dep.employee_id
WHERE dep.employee_id IS NULL;
Output:


27.Display the details of employee who manager id is 101 or 201. (Use Union Clause)
SQL: select * from employees where manager_id = '101' UNION select * from
employees where manager_id='201';


28.Display the details of employees who have at least one dependent.
SQL: select * from employees where employee_id in (select distinct(employee_id)
from dependents);

