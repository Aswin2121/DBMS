create database cycle2;
Query OK, 1 row affected (0.00 sec)

mysql> use cycle2;
Database changed

mysql> create table jobs(job_id varchar(255) PRIMARY KEY,job_title varchar(255),min_salary INT,max_salary INT);
Query OK, 0 rows affected (0.05 sec)

mysql> create table regions(region_id varchar(255) PRIMARY KEY,region_name varchar(255));
Query OK, 0 rows affected (0.05 sec)

create table countries(country_id varchar(255) PRIMARY KEY,country_name varchar(255),region_id varchar(255),FOREIGN KEY(region_id) REFERENCES regions(region_id));

mysql> create table locations(location_id varchar(255) PRIMARY KEY,street_address varchar(255),postal_code INT,city varchar(255),state_province varchar(255),country_id varchar(255),FOREIGN KEY(country_id) REFERENCES countries(country_id));
Query OK, 0 rows affected (0.07 sec)

mysql> create table departments(department_id varchar(255) PRIMARY KEY,department_name varchar(255),location_id varchar(255),FOREIGN KEY(location_id) REFERENCES locations(location_id));
Query OK, 0 rows affected (0.06 sec)
 
mysql> create table employees(employee_id varchar(255) PRIMARY KEY,first_name varchar(255),last_name varchar(255),email varchar(100),phone_number INT,hire_date date,job_id varchar(255),FOREIGN KEY(job_id) REFERENCES jobs(job_id),salary int,manager_id varchar(255),FOREIGN KEY(manager_id) REFERENCES employees(employee_id),department_id varchar(255),FOREIGN KEY(department_id) REFERENCES departments(department_id));
Query OK, 0 rows affected (0.08 sec)

mysql> create table dependents(dependent_id varchar(255) primary key,first_name varchar(255),last_name varchar(255),employee_id varchar(255),FOREIGN KEY(employee_id) REFERENCES employees(employee_id));
Query OK, 0 rows affected (0.06 sec)

mysql> show tables;
+------------------+
| Tables_in_cycle2 |
+------------------+
| countries        |
| departments      |
| dependents       |
| employees        |
| jobs             |
| locations        |
| regions          |
+------------------+
7 rows in set (0.00 sec)

mysql> INSERT INTO regions(region_id,region_name) VALUES (1,'Europe');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO regions(region_id,region_name) VALUES (2,'Americas');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO regions(region_id,region_name) VALUES (3,'Asia');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO regions(region_id,region_name) VALUES (4,'Middle East and Africa');
Query OK, 1 row affected (0.01 sec)

mysql> select*from regions;
+-----------+------------------------+
| region_id | region_name            |
+-----------+------------------------+
| 1         | Europe                 |
| 2         | Americas               |
| 3         | Asia                   |
| 4         | Middle East and Africa |
+-----------+------------------------+
4 rows in set (0.00 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('AR','Argentina',2);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('AU','Australia',3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('BE','Belgium',1);
Query OK, 1 row affected (0.02 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('BR','Brazil',2);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('CA','Canada',2);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('CH','Switzerland',1);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('CN','China',3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('DE','Germany',1);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('DK','Denmark',1);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('EG','Egypt',4);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('FR','France',1);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('HK','HongKong',3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('IL','Israel',4);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('IN','India',3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('IT','Italy',1);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('JP','Japan',3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('KW','Kuwait',4);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('MX','Mexico',2);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('NG','Nigeria',4);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('NL','Netherlands',1);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('SG','Singapore',3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('UK','United Kingdom',1);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('US','United States of America',2);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('ZM','Zambia',4);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO countries(country_id,country_name,region_id) VALUES ('ZW','Zimbabwe',4);
Query OK, 1 row affected (0.00 sec)

mysql> select*from countries;
+------------+--------------------------+-----------+
| country_id | country_name             | region_id |
+------------+--------------------------+-----------+
| AR         | Argentina                | 2         |
| AU         | Australia                | 3         |
| BE         | Belgium                  | 1         |
| BR         | Brazil                   | 2         |
| CA         | Canada                   | 2         |
| CH         | Switzerland              | 1         |
| CN         | China                    | 3         |
| DE         | Germany                  | 1         |
| DK         | Denmark                  | 1         |
| EG         | Egypt                    | 4         |
| FR         | France                   | 1         |
| HK         | HongKong                 | 3         |
| IL         | Israel                   | 4         |
| IN         | India                    | 3         |
| IT         | Italy                    | 1         |
| JP         | Japan                    | 3         |
| KW         | Kuwait                   | 4         |
| MX         | Mexico                   | 2         |
| NG         | Nigeria                  | 4         |
| NL         | Netherlands              | 1         |
| SG         | Singapore                | 3         |
| UK         | United Kingdom           | 1         |
| US         | United States of America | 2         |
| ZM         | Zambia                   | 4         |
| ZW         | Zimbabwe                 | 4         |
+------------+--------------------------+-----------+
25 rows in set (0.00 sec)

mysql> INSERT INTO locations(locations_id,street_address,postal_code,city,state_province,country_id) VALUES (1400,'2014 Jabberwocky Rd','26192','Southlake','Texas','US');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO locations(locations_id,street_address,postal_code,city,state_province,country_id) VALUES (1500,'2011 Interiors Blvd','99236','South San Francisco','California','US');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO locations(locations_id,street_address,postal_code,city,state_province,country_id) VALUES (1700,'2004 Charade Rd','98199','Seattle','Washington','US');
Query OK, 1 row affected (0.02 sec)

mysql> INSERT INTO locations(locations_id,street_address,postal_code,city,state_province,country_id) VALUES (2400,'8204 Arthur St',NULL,'London',NULL,'UK');
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO locations(locations_id,street_address,postal_code,city,state_province,country_id) VALUES (2700,'Schwanthalerstr. 7031','80925','Munich','Bavaria','DE');
Query OK, 1 row affected (0.01 sec)

mysql> select*from locations;
+--------------+-----------------------+-------------+---------------------+----------------+------------+
| locations_id | street_address        | postal_code | city                | state_province | country_id |
+--------------+-----------------------+-------------+---------------------+----------------+------------+
| 1400         | 2014 Jabberwocky Rd   |       26192 | Southlake           | Texas          | US         |
| 1500         | 2011 Interiors Blvd   |       99236 | South San Francisco | California     | US         |
| 1700         | 2004 Charade Rd       |       98199 | Seattle             | Washington     | US         |
| 2400         | 8204 Arthur St        |        NULL | London              | NULL           | UK         |
| 2700         | Schwanthalerstr. 7031 |       80925 | Munich              | Bavaria        | DE         |
+--------------+-----------------------+-------------+---------------------+----------------+------------+
5 rows in set (0.00 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (1,'Public Accountant',4200.00,9000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (2,'Accounting Manager',8200.00,16000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (3,'Administration Assistant',3000.00,6000.00);
Query OK, 1 row affected (0.02 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (4,'President',20000.00,40000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (5,'Administration Vice President',15000.00,30000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (6,'Accountant',4200.00,9000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (7,'Finance Manager',8200.00,16000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (8,'Human Resources Representative',4000.00,9000.00);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (9,'Programmer',4000.00,10000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (10,'Marketing Manager',9000.00,15000.00);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (11,'Marketing Representative',4000.00,9000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (12,'Public Relations Representative',4500.00,10500.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (13,'Purchasing Clerk',2500.00,5500.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (14,'Purchasing Manager',8000.00,15000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (15,'Sales Manager',10000.00,20000.00);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (16,'Sales Representative',6000.00,12000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (17,'Shipping Clerk',2500.00,5500.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (18,'Stock Clerk',2000.00,5000.00);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO jobs(job_id,job_title,min_salary,max_salary) VALUES (19,'Stock Manager',5500.00,8500.00);
Query OK, 1 row affected (0.01 sec)

mysql> select*from jobs;
+--------+---------------------------------+------------+------------+
| job_id | job_title                       | min_salary | max_salary |
+--------+---------------------------------+------------+------------+
| 1      | Public Accountant               |       4200 |       9000 |
| 10     | Marketing Manager               |       9000 |      15000 |
| 11     | Marketing Representative        |       4000 |       9000 |
| 12     | Public Relations Representative |       4500 |      10500 |
| 13     | Purchasing Clerk                |       2500 |       5500 |
| 14     | Purchasing Manager              |       8000 |      15000 |
| 15     | Sales Manager                   |      10000 |      20000 |
| 16     | Sales Representative            |       6000 |      12000 |
| 17     | Shipping Clerk                  |       2500 |       5500 |
| 18     | Stock Clerk                     |       2000 |       5000 |
| 19     | Stock Manager                   |       5500 |       8500 |
| 2      | Accounting Manager              |       8200 |      16000 |
| 3      | Administration Assistant        |       3000 |       6000 |
| 4      | President                       |      20000 |      40000 |
| 5      | Administration Vice President   |      15000 |      30000 |
| 6      | Accountant                      |       4200 |       9000 |
| 7      | Finance Manager                 |       8200 |      16000 |
| 8      | Human Resources Representative  |       4000 |       9000 |
| 9      | Programmer                      |       4000 |      10000 |
+--------+---------------------------------+------------+------------+
19 rows in set (0.00 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (1,'Administration',1700);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (2,'Marketing',1800);
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`cycle2`.`departments`, CONSTRAINT `departments_ibfk_1` FOREIGN KEY (`location_id`) REFERENCES `locations` (`locations_id`))
mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (3,'Purchasing',1700);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (4,'Human Resources',2400);
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (5,'Shipping',1500);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (6,'IT',1400);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (7,'Public Relations',2700);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (8,'Sales',2500);
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`cycle2`.`departments`, CONSTRAINT `departments_ibfk_1` FOREIGN KEY (`location_id`) REFERENCES `locations` (`locations_id`))
mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (9,'Executive',1700);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (10,'Finance',1700);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO departments(department_id,department_name,location_id) VALUES (11,'Accounting',1700);
Query OK, 1 row affected (0.01 sec)

mysql> select*from departments;
+---------------+------------------+-------------+
| department_id | department_name  | location_id |
+---------------+------------------+-------------+
| 1             | Administration   | 1700        |
| 10            | Finance          | 1700        |
| 11            | Accounting       | 1700        |
| 3             | Purchasing       | 1700        |
| 4             | Human Resources  | 2400        |
| 5             | Shipping         | 1500        |
| 6             | IT               | 1400        |
| 7             | Public Relations | 2700        |
| 9             | Executive        | 1700        |
+---------------+------------------+-------------+
9 rows in set (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (100,'Steven','King','steven.king@sqltutorial.org','5151234567','1987-06-17',4,24000.00,NULL,9);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (101,'Neena','Kochhar','neena.kochhar@sqltutorial.org','5151234568','1989-09-21',5,17000.00,100,9);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (102,'Lex','De Haan','lex.de haan@sqltutorial.org','5151234569','1993-01-13',5,17000.00,100,9);
Query OK, 1 row affected (0.02 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (103,'Alexander','Hunold','alexander.hunold@sqltutorial.org','5904234567','1990-01-03',9,9000.00,102,6);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (104,'Bruce','Ernst','bruce.ernst@sqltutorial.org','5904234568','1991-05-21',9,6000.00,103,6);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (105,'David','Austin','david.austin@sqltutorial.org','5904234569','1997-06-25',9,4800.00,103,6);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (106,'Valli','Pataballa','valli.pataballa@sqltutorial.org','5904234560','1998-02-05',9,4800.00,103,6);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (107,'Diana','Lorentz','diana.lorentz@sqltutorial.org','5904235567','1999-02-07',9,4200.00,103,6);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (108,'Nancy','Greenberg','nancy.greenberg@sqltutorial.org','5151244569','1994-08-17',7,12000.00,101,10);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (109,'Daniel','Faviet','daniel.faviet@sqltutorial.org','5151244169','1994-08-16',6,9000.00,108,10);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (110,'John','Chen','john.chen@sqltutorial.org','5151244269','1997-09-28',6,8200.00,108,10);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (111,'Ismael','Sciarra','ismael.sciarra@sqltutorial.org','5151244369','1997-09-30',6,7700.00,108,10);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (112,'Jose Manuel','Urman','jose manuel.urman@sqltutorial.org','5151244469','1998-03-07',6,7800.00,108,10);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (113,'Luis','Popp','luis.popp@sqltutorial.org','5151244567','1999-12-07',6,6900.00,108,10);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (114,'Den','Raphaely','den.raphaely@sqltutorial.org','5151274561','1994-12-07',14,11000.00,100,3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (115,'Alexander','Khoo','alexander.khoo@sqltutorial.org','5151274562','1995-05-18',13,3100.00,114,3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (116,'Shelli','Baida','shelli.baida@sqltutorial.org','5151274563','1997-12-24',13,2900.00,114,3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (117,'Sigal','Tobias','sigal.tobias@sqltutorial.org','5151274564','1997-07-24',13,2800.00,114,3);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (118,'Guy','Himuro','guy.himuro@sqltutorial.org','5151274565','1998-11-15',13,2600.00,114,3);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (119,'Karen','Colmenares','karen.colmenares@sqltutorial.org','5151274566','1999-08-10',13,2500.00,114,3);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (120,'Matthew','Weiss','matthew.weiss@sqltutorial.org','6501231234','1996-07-18',19,8000.00,100,5);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (121,'Adam','Fripp','adam.fripp@sqltutorial.org','6501232234','1997-04-10',19,8200.00,100,5);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (122,'Payam','Kaufling','payam.kaufling@sqltutorial.org','6501233234','1995-05-01',19,7900.00,100,5);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (123,'Shanta','Vollman','shanta.vollman@sqltutorial.org','6501234234','1997-10-10',19,6500.00,100,5);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (126,'Irene','Mikkilineni','irene.mikkilineni@sqltutorial.org','6501241224','1998-09-28',18,2700.00,120,5);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (192,'Sarah','Bell','sarah.bell@sqltutorial.org','6505011876','1996-02-04',17,4000.00,123,5);
Query OK, 1 row affected (0.12 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (193,'Britney','Everett','britney.everett@sqltutorial.org','6505012876','1997-03-03',17,3900.00,123,5);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (200,'Jennifer','Whalen','jennifer.whalen@sqltutorial.org','5151234444','1987-09-17',3,4400.00,101,1);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (203,'Susan','Mavris','susan.mavris@sqltutorial.org','5151237777','1994-06-07',8,6500.00,101,4);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (204,'Hermann','Baer','hermann.baer@sqltutorial.org','5151238888','1994-06-07',12,10000.00,101,7);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (205,'Shelley','Higgins','shelley.higgins@sqltutorial.org','5151238080','1994-06-07',2,12000.00,101,11);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,manager_id,department_id) VALUES (206,'William','Gietz','william.gietz@sqltutorial.org','5151238181','1994-06-07',1,8300.00,205,11);
Query OK, 1 row affected (0.01 sec)

mysql> select*from employees;
+-------------+-------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name  | last_name   | email                             | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+-------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 100         | Steven      | King        | steven.king@sqltutorial.org       | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
| 101         | Neena       | Kochhar     | neena.kochhar@sqltutorial.org     | 5151234568   | 1989-09-21 | 5      |  17000 | 100        | 9             |
| 102         | Lex         | De Haan     | lex.de haan@sqltutorial.org       | 5151234569   | 1993-01-13 | 5      |  17000 | 100        | 9             |
| 103         | Alexander   | Hunold      | alexander.hunold@sqltutorial.org  | 5904234567   | 1990-01-03 | 9      |   9000 | 102        | 6             |
| 104         | Bruce       | Ernst       | bruce.ernst@sqltutorial.org       | 5904234568   | 1991-05-21 | 9      |   6000 | 103        | 6             |
| 105         | David       | Austin      | david.austin@sqltutorial.org      | 5904234569   | 1997-06-25 | 9      |   4800 | 103        | 6             |
| 106         | Valli       | Pataballa   | valli.pataballa@sqltutorial.org   | 5904234560   | 1998-02-05 | 9      |   4800 | 103        | 6             |
| 107         | Diana       | Lorentz     | diana.lorentz@sqltutorial.org     | 5904235567   | 1999-02-07 | 9      |   4200 | 103        | 6             |
| 108         | Nancy       | Greenberg   | nancy.greenberg@sqltutorial.org   | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 109         | Daniel      | Faviet      | daniel.faviet@sqltutorial.org     | 5151244169   | 1994-08-16 | 6      |   9000 | 108        | 10            |
| 110         | John        | Chen        | john.chen@sqltutorial.org         | 5151244269   | 1997-09-28 | 6      |   8200 | 108        | 10            |
| 111         | Ismael      | Sciarra     | ismael.sciarra@sqltutorial.org    | 5151244369   | 1997-09-30 | 6      |   7700 | 108        | 10            |
| 112         | Jose Manuel | Urman       | jose manuel.urman@sqltutorial.org | 5151244469   | 1998-03-07 | 6      |   7800 | 108        | 10            |
| 113         | Luis        | Popp        | luis.popp@sqltutorial.org         | 5151244567   | 1999-12-07 | 6      |   6900 | 108        | 10            |
| 114         | Den         | Raphaely    | den.raphaely@sqltutorial.org      | 5151274561   | 1994-12-07 | 14     |  11000 | 100        | 3             |
| 115         | Alexander   | Khoo        | alexander.khoo@sqltutorial.org    | 5151274562   | 1995-05-18 | 13     |   3100 | 114        | 3             |
| 116         | Shelli      | Baida       | shelli.baida@sqltutorial.org      | 5151274563   | 1997-12-24 | 13     |   2900 | 114        | 3             |
| 117         | Sigal       | Tobias      | sigal.tobias@sqltutorial.org      | 5151274564   | 1997-07-24 | 13     |   2800 | 114        | 3             |
| 118         | Guy         | Himuro      | guy.himuro@sqltutorial.org        | 5151274565   | 1998-11-15 | 13     |   2600 | 114        | 3             |
| 119         | Karen       | Colmenares  | karen.colmenares@sqltutorial.org  | 5151274566   | 1999-08-10 | 13     |   2500 | 114        | 3             |
| 120         | Matthew     | Weiss       | matthew.weiss@sqltutorial.org     | 6501231234   | 1996-07-18 | 19     |   8000 | 100        | 5             |
| 121         | Adam        | Fripp       | adam.fripp@sqltutorial.org        | 6501232234   | 1997-04-10 | 19     |   8200 | 100        | 5             |
| 122         | Payam       | Kaufling    | payam.kaufling@sqltutorial.org    | 6501233234   | 1995-05-01 | 19     |   7900 | 100        | 5             |
| 123         | Shanta      | Vollman     | shanta.vollman@sqltutorial.org    | 6501234234   | 1997-10-10 | 19     |   6500 | 100        | 5             |
| 126         | Irene       | Mikkilineni | irene.mikkilineni@sqltutorial.org | 6501241224   | 1998-09-28 | 18     |   2700 | 120        | 5             |
| 192         | Sarah       | Bell        | sarah.bell@sqltutorial.org        | 6505011876   | 1996-02-04 | 17     |   4000 | 123        | 5             |
| 193         | Britney     | Everett     | britney.everett@sqltutorial.org   | 6505012876   | 1997-03-03 | 17     |   3900 | 123        | 5             |
| 200         | Jennifer    | Whalen      | jennifer.whalen@sqltutorial.org   | 5151234444   | 1987-09-17 | 3      |   4400 | 101        | 1             |
| 203         | Susan       | Mavris      | susan.mavris@sqltutorial.org      | 5151237777   | 1994-06-07 | 8      |   6500 | 101        | 4             |
| 204         | Hermann     | Baer        | hermann.baer@sqltutorial.org      | 5151238888   | 1994-06-07 | 12     |  10000 | 101        | 7             |
| 205         | Shelley     | Higgins     | shelley.higgins@sqltutorial.org   | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
| 206         | William     | Gietz       | william.gietz@sqltutorial.org     | 5151238181   | 1994-06-07 | 1      |   8300 | 205        | 11            |
+-------------+-------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
32 rows in set (0.00 sec)

mysql> ALTER TABLE dependents  ADD  relationship VARCHAR(100);
Query OK, 0 rows affected (0.11 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> DESC dependents;
+--------------+--------------+------+-----+---------+-------+
| Field        | Type         | Null | Key | Default | Extra |
+--------------+--------------+------+-----+---------+-------+
| dependent_id | varchar(200) | NO   | PRI | NULL    |       |
| first_name   | varchar(200) | YES  |     | NULL    |       |
| last_name    | varchar(200) | YES  |     | NULL    |       |
| employee_id  | varchar(200) | YES  | MUL | NULL    |       |
| relationship | varchar(100) | YES  |     | NULL    |       |
+--------------+--------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (1,'Penelope','Gietz','Child',206);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (2,'Nick','Higgins','Child',205);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (3,'Ed','Whalen','Child',200);
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (4,'Jennifer','King','Child',100);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (5,'Johnny','Kochhar','Child',101);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (6,'Bette','De Haan','Child',102);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (7,'Grace','Faviet','Child',109);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (8,'Matthew','Chen','Child',110);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (9,'Joe','Sciarra','Child',111);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (10,'Christian','Urman','Child',112);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (11,'Zero','Popp','Child',113);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (12,'Karl','Greenberg','Child',108);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (13,'Uma','Mavris','Child',203);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (14,'Vivien','Hunold','Child',103);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (15,'Cuba','Ernst','Child',104);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (16,'Fred','Austin','Child',105);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (17,'Helen','Pataballa','Child',106);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (18,'Dan','Lorentz','Child',107);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (21,'Kirsten','Baer','Child',204);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (22,'Elvis','Khoo','Child',115);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (23,'Sandra','Baida','Child',116);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (24,'Cameron','Tobias','Child',117);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (25,'Kevin','Himuro','Child',118);
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (26,'Rip','Colmenares','Child',119);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (27,'Julia','Raphaely','Child',114);
Query OK, 1 row affected (0.01 sec)

mysql> select*from dependents;
+--------------+------------+------------+-------------+--------------+
| dependent_id | first_name | last_name  | employee_id | relationship |
+--------------+------------+------------+-------------+--------------+
| 1            | Penelope   | Gietz      | 206         | Child        |
| 10           | Christian  | Urman      | 112         | Child        |
| 11           | Zero       | Popp       | 113         | Child        |
| 12           | Karl       | Greenberg  | 108         | Child        |
| 13           | Uma        | Mavris     | 203         | Child        |
| 14           | Vivien     | Hunold     | 103         | Child        |
| 15           | Cuba       | Ernst      | 104         | Child        |
| 16           | Fred       | Austin     | 105         | Child        |
| 17           | Helen      | Pataballa  | 106         | Child        |
| 18           | Dan        | Lorentz    | 107         | Child        |
| 2            | Nick       | Higgins    | 205         | Child        |
| 21           | Kirsten    | Baer       | 204         | Child        |
| 22           | Elvis      | Khoo       | 115         | Child        |
| 23           | Sandra     | Baida      | 116         | Child        |
| 24           | Cameron    | Tobias     | 117         | Child        |
| 25           | Kevin      | Himuro     | 118         | Child        |
| 26           | Rip        | Colmenares | 119         | Child        |
| 27           | Julia      | Raphaely   | 114         | Child        |
| 3            | Ed         | Whalen     | 200         | Child        |
| 4            | Jennifer   | King       | 100         | Child        |
| 5            | Johnny     | Kochhar    | 101         | Child        |
| 6            | Bette      | De Haan    | 102         | Child        |
| 7            | Grace      | Faviet     | 109         | Child        |
| 8            | Matthew    | Chen       | 110         | Child        |
| 9            | Joe        | Sciarra    | 111         | Child        |
+--------------+------------+------------+-------------+--------------+
25 rows in set (0.00 sec)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
mysql> show tables;
+--------------------+
| Tables_in_cycle2   |
+--------------------+
| countries          |
| departments        |
| dependents         |
| employees          |
| jobs               |
| location           |
| regions            |
| v_employee_details |
+--------------------+
8 rows in set (0.00 sec)


mysql> desc countries;
+--------------+--------------+------+-----+---------+-------+
| Field        | Type         | Null | Key | Default | Extra |
+--------------+--------------+------+-----+---------+-------+
| country_id   | varchar(255) | NO   | PRI | NULL    |       |
| country_name | varchar(255) | YES  |     | NULL    |       |
| region_id    | varchar(255) | YES  | MUL | NULL    |       |
+--------------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> desc departments;
+-----------------+--------------+------+-----+---------+-------+
| Field           | Type         | Null | Key | Default | Extra |
+-----------------+--------------+------+-----+---------+-------+
| department_id   | varchar(255) | NO   | PRI | NULL    |       |
| department_name | varchar(255) | YES  |     | NULL    |       |
| location_id     | varchar(255) | YES  | MUL | NULL    |       |
+-----------------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> desc dependents;
+--------------+--------------+------+-----+---------+-------+
| Field        | Type         | Null | Key | Default | Extra |
+--------------+--------------+------+-----+---------+-------+
| dependent_id | varchar(255) | NO   | PRI | NULL    |       |
| first_name   | varchar(255) | YES  |     | NULL    |       |
| last_name    | varchar(255) | YES  |     | NULL    |       |
| relationship | varchar(255) | YES  |     | NULL    |       |
| employee_id  | varchar(255) | YES  | MUL | NULL    |       |
+--------------+--------------+------+-----+---------+-------+
5 rows in set (0.01 sec)

mysql> desc employees;
+---------------+--------------+------+-----+---------+-------+
| Field         | Type         | Null | Key | Default | Extra |
+---------------+--------------+------+-----+---------+-------+
| employee_id   | varchar(255) | NO   | PRI | NULL    |       |
| first_name    | varchar(255) | YES  |     | NULL    |       |
| last_name     | varchar(255) | YES  |     | NULL    |       |
| email         | varchar(255) | YES  |     | NULL    |       |
| phone_number  | varchar(20)  | YES  |     | NULL    |       |
| hire_date     | date         | YES  |     | NULL    |       |
| job_id        | varchar(255) | YES  | MUL | NULL    |       |
| salary        | int(11)      | YES  |     | NULL    |       |
| manager_id    | varchar(255) | YES  | MUL | NULL    |       |
| department_id | varchar(255) | YES  | MUL | NULL    |       |
+---------------+--------------+------+-----+---------+-------+
10 rows in set (0.00 sec)

mysql> desc jobs;
+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| job_id     | varchar(255) | NO   | PRI | NULL    |       |
| job_title  | varchar(255) | YES  |     | NULL    |       |
| min_salary | int(11)      | YES  |     | NULL    |       |
| max_salary | int(11)      | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+
4 rows in set (0.01 sec)

mysql> desc location;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| location_id    | varchar(255) | NO   | PRI | NULL    |       |
| street_adress  | varchar(255) | YES  |     | NULL    |       |
| postal_code    | int(11)      | YES  |     | NULL    |       |
| city           | varchar(255) | YES  |     | NULL    |       |
| state_province | varchar(255) | YES  |     | NULL    |       |
| country_id     | varchar(255) | YES  | MUL | NULL    |       |
+----------------+--------------+------+-----+---------+-------+
6 rows in set (0.01 sec)

mysql> desc regions;
+-------------+--------------+------+-----+---------+-------+
| Field       | Type         | Null | Key | Default | Extra |
+-------------+--------------+------+-----+---------+-------+
| region_id   | varchar(255) | NO   | PRI | NULL    |       |
| region_name | varchar(255) | YES  |     | NULL    |       |
+-------------+--------------+------+-----+---------+-------+
2 rows in set (0.00 sec)



mysql> select * from countries;
+------------+--------------------------+-----------+
| country_id | country_name             | region_id |
+------------+--------------------------+-----------+
| AR         | Argentina                | 2         |
| AU         | Australia                | 3         |
| BE         | Belgium                  | 1         |
| BR         | Brazil                   | 2         |
| CA         | Canada                   | 2         |
| CH         | Switzerland              | 1         |
| CN         | China                    | 3         |
| DE         | Germany                  | 1         |
| DK         | Denmark                  | 1         |
| EG         | Egypt                    | 4         |
| FR         | France                   | 1         |
| HK         | HongKong                 | 3         |
| IL         | Israel                   | 4         |
| IN         | India                    | 3         |
| IT         | Italy                    | 1         |
| JP         | Japan                    | 3         |
| KW         | Kuwait                   | 4         |
| MX         | Mexico                   | 2         |
| NG         | Nigeria                  | 4         |
| NL         | Netherlands              | 1         |
| SG         | Singapore                | 3         |
| UK         | United Kingdom           | 1         |
| US         | United States of America | 2         |
| ZM         | Zambia                   | 4         |
| ZW         | Zimbabwe                 | 4         |
+------------+--------------------------+-----------+
25 rows in set (0.00 sec)

mysql> select * from departments;
+---------------+------------------+-------------+
| department_id | department_name  | location_id |
+---------------+------------------+-------------+
| 1             | Administration   | 1700        |
| 10            | Finance          | 1700        |
| 11            | Accounting       | 1700        |
| 3             | Purchasing       | 1700        |
| 4             | Human Resources  | 2400        |
| 5             | Shipping         | 1500        |
| 6             | IT               | 1400        |
| 7             | Public Relations | 2700        |
| 9             | Executive        | 1700        |
+---------------+------------------+-------------+
9 rows in set (0.00 sec)

mysql> select * from dependents;
+--------------+------------+------------+--------------+-------------+
| dependent_id | first_name | last_name  | relationship | employee_id |
+--------------+------------+------------+--------------+-------------+
| 1            | Penelope   | Gietz      | Child        | 206         |
| 10           | Christian  | Urman      | Child        | 112         |
| 11           | Zero       | Popp       | Child        | 113         |
| 12           | Karl       | Greenberg  | Child        | 108         |
| 13           | Uma        | Mavris     | Child        | 203         |
| 14           | Vivien     | Hunold     | Child        | 103         |
| 15           | Cuba       | Ernst      | Child        | 104         |
| 16           | Fred       | Austin     | Child        | 105         |
| 17           | Helen      | Pataballa  | Child        | 106         |
| 18           | Dan        | Lorentz    | Child        | 107         |
| 2            | Nick       | Higgins    | Child        | 205         |
| 21           | Kirsten    | Baer       | Child        | 204         |
| 22           | Elvis      | Khoo       | Child        | 115         |
| 23           | Sandra     | Baida      | Child        | 116         |
| 24           | Cameron    | Tobias     | Child        | 117         |
| 25           | Kevin      | Himuro     | Child        | 118         |
| 26           | Rip        | Colmenares | Child        | 119         |
| 27           | Julia      | Raphaely   | Child        | 114         |
| 3            | Ed         | Whalen     | Child        | 200         |
| 4            | Jennifer   | King       | Child        | 100         |
| 5            | Johnny     | Kochhar    | Child        | 101         |
| 6            | Bette      | De Haan    | Child        | 102         |
| 7            | Grace      | Faviet     | Child        | 109         |
| 8            | Matthew    | Chen       | Child        | 110         |
| 9            | Joe        | Sciarra    | Child        | 111         |
+--------------+------------+------------+--------------+-------------+
25 rows in set (0.00 sec)

mysql> select * from employees;
+-------------+-------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name  | last_name   | email                             | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+-------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 100         | Steven      | King        | steven.king@sqltutorial.org       | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
| 101         | Neena       | Kochhar     | neena.kochhar@sqltutorial.org     | 5151234568   | 1989-09-21 | 5      |  17000 | 100        | 9             |
| 102         | Lex         | De Haan     | lex.de haan@sqltutorial.org       | 5151234569   | 1993-01-13 | 5      |  17000 | 100        | 9             |
| 103         | Alexander   | Hunold      | alexander.hunold@sqltutorial.org  | 5904234567   | 1990-01-03 | 9      |   9000 | 102        | 6             |
| 104         | Bruce       | Ernst       | bruce.ernst@sqltutorial.org       | 5904234568   | 1991-05-21 | 9      |   6000 | 103        | 6             |
| 105         | David       | Austin      | david.austin@sqltutorial.org      | 5904234569   | 1997-06-25 | 9      |   4800 | 103        | 6             |
| 106         | Valli       | Pataballa   | valli.pataballa@sqltutorial.org   | 5904234560   | 1998-02-05 | 9      |   4800 | 103        | 6             |
| 107         | Diana       | Lorentz     | diana.lorentz@sqltutorial.org     | 5904235567   | 1999-02-07 | 9      |   4200 | 103        | 6             |
| 108         | Nancy       | Greenberg   | nancy.greenberg@sqltutorial.org   | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 109         | Daniel      | Faviet      | daniel.faviet@sqltutorial.org     | 5151244169   | 1994-08-16 | 6      |   9000 | 108        | 10            |
| 110         | John        | Chen        | john.chen@sqltutorial.org         | 5151244269   | 1997-09-28 | 6      |   8200 | 108        | 10            |
| 111         | Ismael      | Sciarra     | ismael.sciarra@sqltutorial.org    | 5151244369   | 1997-09-30 | 6      |   7700 | 108        | 10            |
| 112         | Jose Manuel | Urman       | jose manuel.urman@sqltutorial.org | 5151244469   | 1998-03-07 | 6      |   7800 | 108        | 10            |
| 113         | Luis        | Popp        | luis.popp@sqltutorial.org         | 5151244567   | 1999-12-07 | 6      |   6900 | 108        | 10            |
| 114         | Den         | Raphaely    | den.raphaely@sqltutorial.org      | 5151274561   | 1994-12-07 | 14     |  11000 | 100        | 3             |
| 115         | Alexander   | Khoo        | alexander.khoo@sqltutorial.org    | 5151274562   | 1995-05-18 | 13     |   3100 | 114        | 3             |
| 116         | Shelli      | Baida       | shelli.baida@sqltutorial.org      | 5151274563   | 1997-12-24 | 13     |   2900 | 114        | 3             |
| 117         | Sigal       | Tobias      | sigal.tobias@sqltutorial.org      | 5151274564   | 1997-07-24 | 13     |   2800 | 114        | 3             |
| 118         | Guy         | Himuro      | guy.himuro@sqltutorial.org        | 5151274565   | 1998-11-15 | 13     |   2600 | 114        | 3             |
| 119         | Karen       | Colmenares  | karen.colmenares@sqltutorial.org  | 5151274566   | 1999-08-10 | 13     |   2500 | 114        | 3             |
| 120         | Matthew     | Weiss       | matthew.weiss@sqltutorial.org     | 6501231234   | 1996-07-18 | 19     |   8000 | 100        | 5             |
| 121         | Adam        | Fripp       | adam.fripp@sqltutorial.org        | 6501232234   | 1997-04-10 | 19     |   8200 | 100        | 5             |
| 122         | Payam       | Kaufling    | payam.kaufling@sqltutorial.org    | 6501233234   | 1995-05-01 | 19     |   7900 | 100        | 5             |
| 123         | Shanta      | Vollman     | shanta.vollman@sqltutorial.org    | 6501234234   | 1997-10-10 | 19     |   6500 | 100        | 5             |
| 126         | Irene       | Mikkilineni | irene.mikkilineni@sqltutorial.org | 6501241224   | 1998-09-28 | 18     |   2700 | 120        | 5             |
| 192         | Sarah       | Bell        | sarah.bell@sqltutorial.org        | 6505011876   | 1996-02-04 | 17     |   4000 | 123        | 5             |
| 193         | Britney     | Everett     | britney.everett@sqltutorial.org   | 6505012876   | 1997-03-03 | 17     |   3900 | 123        | 5             |
| 200         | Jennifer    | Whalen      | jennifer.whalen@sqltutorial.org   | 5151234444   | 1987-09-17 | 3      |   4400 | 101        | 1             |
| 203         | Susan       | Mavris      | susan.mavris@sqltutorial.org      | 5151237777   | 1994-06-07 | 8      |   6500 | 101        | 4             |
| 204         | Hermann     | Baer        | hermann.baer@sqltutorial.org      | 5151238888   | 1994-06-07 | 12     |  10000 | 101        | 7             |
| 205         | Shelley     | Higgins     | shelley.higgins@sqltutorial.org   | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
| 206         | William     | Gietz       | william.gietz@sqltutorial.org     | 5151238181   | 1994-06-07 | 1      |   8300 | 205        | 11            |
+-------------+-------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
32 rows in set (0.00 sec)

mysql> select * from jobs;
+--------+---------------------------------+------------+------------+
| job_id | job_title                       | min_salary | max_salary |
+--------+---------------------------------+------------+------------+
| 1      | Public Accountant               |       4200 |       9000 |
| 10     | Marketing Manager               |       9000 |      15000 |
| 11     | Marketing Representative        |       4000 |       9000 |
| 12     | Public Relations Representative |       4500 |      10500 |
| 13     | Purchasing Clerk                |       2500 |       5500 |
| 14     | Purchasing Manager              |       8000 |      15000 |
| 15     | Sales Manager                   |      10000 |      20000 |
| 16     | Sales Representative            |       6000 |      12000 |
| 17     | Shipping Clerk                  |       2500 |       5500 |
| 18     | Stock Clerk                     |       2000 |       5000 |
| 19     | Stock Manager                   |       5500 |       8500 |
| 2      | Accounting Manager              |       8200 |      16000 |
| 3      | Administration Assistant        |       3000 |       6000 |
| 4      | President                       |      20000 |      40000 |
| 5      | Administration Vice President   |      15000 |      30000 |
| 6      | Accountant                      |       4200 |       9000 |
| 7      | Finance Manager                 |       8200 |      16000 |
| 8      | Human Resources Representative  |       4000 |       9000 |
| 9      | Programmer                      |       4000 |      10000 |
+--------+---------------------------------+------------+------------+
19 rows in set (0.00 sec)

mysql> select * from location;
+-------------+-----------------------+-------------+---------------------+----------------+------------+
| location_id | street_adress         | postal_code | city                | state_province | country_id |
+-------------+-----------------------+-------------+---------------------+----------------+------------+
| 1400        | 2014 Jabberwocky Rd   |       26192 | Southlake           | Texas          | US         |
| 1500        | 2011 Interiors Blvd   |       99236 | South San Francisco | California     | US         |
| 1700        | 2004 Charade Rd       |       98199 | Seattle             | Washington     | US         |
| 2400        | 8204 Arthur St        |        NULL | London              | NULL           | UK         |
| 2700        | Schwanthalerstr. 7031 |       80925 | Munich              | Bavaria        | DE         |
+-------------+-----------------------+-------------+---------------------+----------------+------------+
5 rows in set (0.00 sec)

mysql> select * from regions;
+-----------+------------------------+
| region_id | region_name            |
+-----------+------------------------+
| 1         | Europe                 |
| 2         | Americas               |
| 3         | Asia                   |
| 4         | Middle East and Africa |
+-----------+------------------------+
4 rows in set (0.00 sec)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


1. Find all employees who locate in the location with the id 1700.

mysql> select *FROM employees WHERE department_id IN (SELECT department_id FROM departments WHERE location_id = 1700 );
+-------------+-------------+------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name  | last_name  | email                             | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+-------------+------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 200         | Jennifer    | Whalen     | jennifer.whalen@sqltutorial.org   | 5151234444   | 1987-09-17 | 3      |   4400 | 101        | 1             |
| 108         | Nancy       | Greenberg  | nancy.greenberg@sqltutorial.org   | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 109         | Daniel      | Faviet     | daniel.faviet@sqltutorial.org     | 5151244169   | 1994-08-16 | 6      |   9000 | 108        | 10            |
| 110         | John        | Chen       | john.chen@sqltutorial.org         | 5151244269   | 1997-09-28 | 6      |   8200 | 108        | 10            |
| 111         | Ismael      | Sciarra    | ismael.sciarra@sqltutorial.org    | 5151244369   | 1997-09-30 | 6      |   7700 | 108        | 10            |
| 112         | Jose Manuel | Urman      | jose manuel.urman@sqltutorial.org | 5151244469   | 1998-03-07 | 6      |   7800 | 108        | 10            |
| 113         | Luis        | Popp       | luis.popp@sqltutorial.org         | 5151244567   | 1999-12-07 | 6      |   6900 | 108        | 10            |
| 205         | Shelley     | Higgins    | shelley.higgins@sqltutorial.org   | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
| 206         | William     | Gietz      | william.gietz@sqltutorial.org     | 5151238181   | 1994-06-07 | 1      |   8300 | 205        | 11            |
| 114         | Den         | Raphaely   | den.raphaely@sqltutorial.org      | 5151274561   | 1994-12-07 | 14     |  11000 | 100        | 3             |
| 115         | Alexander   | Khoo       | alexander.khoo@sqltutorial.org    | 5151274562   | 1995-05-18 | 13     |   3100 | 114        | 3             |
| 116         | Shelli      | Baida      | shelli.baida@sqltutorial.org      | 5151274563   | 1997-12-24 | 13     |   2900 | 114        | 3             |
| 117         | Sigal       | Tobias     | sigal.tobias@sqltutorial.org      | 5151274564   | 1997-07-24 | 13     |   2800 | 114        | 3             |
| 118         | Guy         | Himuro     | guy.himuro@sqltutorial.org        | 5151274565   | 1998-11-15 | 13     |   2600 | 114        | 3             |
| 119         | Karen       | Colmenares | karen.colmenares@sqltutorial.org  | 5151274566   | 1999-08-10 | 13     |   2500 | 114        | 3             |
| 100         | Steven      | King       | steven.king@sqltutorial.org       | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
| 101         | Neena       | Kochhar    | neena.kochhar@sqltutorial.org     | 5151234568   | 1989-09-21 | 5      |  17000 | 100        | 9             |
| 102         | Lex         | De Haan    | lex.de haan@sqltutorial.org       | 5151234569   | 1993-01-13 | 5      |  17000 | 100        | 9             |
+-------------+-------------+------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+



2. Find all employees who do not locate at the location 1700.

mysql> select *FROM employees WHERE department_id IN (SELECT department_id FROM departments WHERE location_id != 1700 );
+-------------+------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name | last_name   | email                             | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 103         | Alexander  | Hunold      | alexander.hunold@sqltutorial.org  | 5904234567   | 1990-01-03 | 9      |   9000 | 102        | 6             |
| 104         | Bruce      | Ernst       | bruce.ernst@sqltutorial.org       | 5904234568   | 1991-05-21 | 9      |   6000 | 103        | 6             |
| 105         | David      | Austin      | david.austin@sqltutorial.org      | 5904234569   | 1997-06-25 | 9      |   4800 | 103        | 6             |
| 106         | Valli      | Pataballa   | valli.pataballa@sqltutorial.org   | 5904234560   | 1998-02-05 | 9      |   4800 | 103        | 6             |
| 107         | Diana      | Lorentz     | diana.lorentz@sqltutorial.org     | 5904235567   | 1999-02-07 | 9      |   4200 | 103        | 6             |
| 120         | Matthew    | Weiss       | matthew.weiss@sqltutorial.org     | 6501231234   | 1996-07-18 | 19     |   8000 | 100        | 5             |
| 121         | Adam       | Fripp       | adam.fripp@sqltutorial.org        | 6501232234   | 1997-04-10 | 19     |   8200 | 100        | 5             |
| 122         | Payam      | Kaufling    | payam.kaufling@sqltutorial.org    | 6501233234   | 1995-05-01 | 19     |   7900 | 100        | 5             |
| 123         | Shanta     | Vollman     | shanta.vollman@sqltutorial.org    | 6501234234   | 1997-10-10 | 19     |   6500 | 100        | 5             |
| 126         | Irene      | Mikkilineni | irene.mikkilineni@sqltutorial.org | 6501241224   | 1998-09-28 | 18     |   2700 | 120        | 5             |
| 192         | Sarah      | Bell        | sarah.bell@sqltutorial.org        | 6505011876   | 1996-02-04 | 17     |   4000 | 123        | 5             |
| 193         | Britney    | Everett     | britney.everett@sqltutorial.org   | 6505012876   | 1997-03-03 | 17     |   3900 | 123        | 5             |
| 203         | Susan      | Mavris      | susan.mavris@sqltutorial.org      | 5151237777   | 1994-06-07 | 8      |   6500 | 101        | 4             |
| 204         | Hermann    | Baer        | hermann.baer@sqltutorial.org      | 5151238888   | 1994-06-07 | 12     |  10000 | 101        | 7             |
+-------------+------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+


3. Finds the employees who have the highest salary.
mysql> SELECT * FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);
+-------------+------------+-----------+-----------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name | last_name | email                       | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+------------+-----------+-----------------------------+--------------+------------+--------+--------+------------+---------------+
| 100         | Steven     | King      | steven.king@sqltutorial.org | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
+-------------+------------+-----------+-----------------------------+--------------+------------+--------+--------+------------+---------------+
1 row in set (0.00 sec)


4. Finds all employees who salaries are greater than the average salary of all employees.

mysql> SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
+-------------+-------------+-----------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name  | last_name | email                             | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+-------------+-----------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 100         | Steven      | King      | steven.king@sqltutorial.org       | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
| 101         | Neena       | Kochhar   | neena.kochhar@sqltutorial.org     | 5151234568   | 1989-09-21 | 5      |  17000 | 100        | 9             |
| 102         | Lex         | De Haan   | lex.de haan@sqltutorial.org       | 5151234569   | 1993-01-13 | 5      |  17000 | 100        | 9             |
| 103         | Alexander   | Hunold    | alexander.hunold@sqltutorial.org  | 5904234567   | 1990-01-03 | 9      |   9000 | 102        | 6             |
| 108         | Nancy       | Greenberg | nancy.greenberg@sqltutorial.org   | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 109         | Daniel      | Faviet    | daniel.faviet@sqltutorial.org     | 5151244169   | 1994-08-16 | 6      |   9000 | 108        | 10            |
| 110         | John        | Chen      | john.chen@sqltutorial.org         | 5151244269   | 1997-09-28 | 6      |   8200 | 108        | 10            |
| 111         | Ismael      | Sciarra   | ismael.sciarra@sqltutorial.org    | 5151244369   | 1997-09-30 | 6      |   7700 | 108        | 10            |
| 112         | Jose Manuel | Urman     | jose manuel.urman@sqltutorial.org | 5151244469   | 1998-03-07 | 6      |   7800 | 108        | 10            |
| 114         | Den         | Raphaely  | den.raphaely@sqltutorial.org      | 5151274561   | 1994-12-07 | 14     |  11000 | 100        | 3             |
| 120         | Matthew     | Weiss     | matthew.weiss@sqltutorial.org     | 6501231234   | 1996-07-18 | 19     |   8000 | 100        | 5             |
| 121         | Adam        | Fripp     | adam.fripp@sqltutorial.org        | 6501232234   | 1997-04-10 | 19     |   8200 | 100        | 5             |
| 122         | Payam       | Kaufling  | payam.kaufling@sqltutorial.org    | 6501233234   | 1995-05-01 | 19     |   7900 | 100        | 5             |
| 204         | Hermann     | Baer      | hermann.baer@sqltutorial.org      | 5151238888   | 1994-06-07 | 12     |  10000 | 101        | 7             |
| 205         | Shelley     | Higgins   | shelley.higgins@sqltutorial.org   | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
| 206         | William     | Gietz     | william.gietz@sqltutorial.org     | 5151238181   | 1994-06-07 | 1      |   8300 | 205        | 11            |
+-------------+-------------+-----------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
16 rows in set (0.00 sec)



5. Finds all departments (Department Id, Name) which have at least one employee with
the salary is greater than 10,000.

mysql> SELECT departments.department_id, departments.department_name
    -> FROM departments
    -> WHERE EXISTS (SELECT * FROM employees WHERE employees.department_id = departments.department_id AND salary > 10000);
+---------------+-----------------+
| department_id | department_name |
+---------------+-----------------+
| 10            | Finance         |
| 11            | Accounting      |
| 3             | Purchasing      |
| 9             | Executive       |
+---------------+-----------------+
4 rows in set (0.00 sec)



6. Finds all departments (Department Id, Name) that do not have any employee with the
salary greater than 10,000.

mysql> SELECT departments.department_id, departments.department_name 
    -> FROM departments 
    -> WHERE NOT EXISTS (SELECT * FROM employees WHERE employees.department_id = departments.department_id AND salary > 10000);
+---------------+------------------+
| department_id | department_name  |
+---------------+------------------+
| 1             | Administration   |
| 4             | Human Resources  |
| 5             | Shipping         |
| 6             | IT               |
| 7             | Public Relations |
+---------------+------------------+
5 rows in set (0.00 sec)



7. Finds all employees whose salaries are greater than the lowest salary of every
department.

mysql> SELECT e.* FROM employees e JOIN ( SELECT department_id, MIN(salary) as min_salary FROM employees GROUP BY department_id) AS dept_min_salary ON e.department_id = dept_min_salary.department_id WHERE e.salary > dept_min_salary.min_salary;
+-------------+-------------+-----------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name  | last_name | email                             | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+-------------+-----------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 108         | Nancy       | Greenberg | nancy.greenberg@sqltutorial.org   | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 109         | Daniel      | Faviet    | daniel.faviet@sqltutorial.org     | 5151244169   | 1994-08-16 | 6      |   9000 | 108        | 10            |
| 110         | John        | Chen      | john.chen@sqltutorial.org         | 5151244269   | 1997-09-28 | 6      |   8200 | 108        | 10            |
| 111         | Ismael      | Sciarra   | ismael.sciarra@sqltutorial.org    | 5151244369   | 1997-09-30 | 6      |   7700 | 108        | 10            |
| 112         | Jose Manuel | Urman     | jose manuel.urman@sqltutorial.org | 5151244469   | 1998-03-07 | 6      |   7800 | 108        | 10            |
| 205         | Shelley     | Higgins   | shelley.higgins@sqltutorial.org   | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
| 114         | Den         | Raphaely  | den.raphaely@sqltutorial.org      | 5151274561   | 1994-12-07 | 14     |  11000 | 100        | 3             |
| 115         | Alexander   | Khoo      | alexander.khoo@sqltutorial.org    | 5151274562   | 1995-05-18 | 13     |   3100 | 114        | 3             |
| 116         | Shelli      | Baida     | shelli.baida@sqltutorial.org      | 5151274563   | 1997-12-24 | 13     |   2900 | 114        | 3             |
| 117         | Sigal       | Tobias    | sigal.tobias@sqltutorial.org      | 5151274564   | 1997-07-24 | 13     |   2800 | 114        | 3             |
| 118         | Guy         | Himuro    | guy.himuro@sqltutorial.org        | 5151274565   | 1998-11-15 | 13     |   2600 | 114        | 3             |
| 120         | Matthew     | Weiss     | matthew.weiss@sqltutorial.org     | 6501231234   | 1996-07-18 | 19     |   8000 | 100        | 5             |
| 121         | Adam        | Fripp     | adam.fripp@sqltutorial.org        | 6501232234   | 1997-04-10 | 19     |   8200 | 100        | 5             |
| 122         | Payam       | Kaufling  | payam.kaufling@sqltutorial.org    | 6501233234   | 1995-05-01 | 19     |   7900 | 100        | 5             |
| 123         | Shanta      | Vollman   | shanta.vollman@sqltutorial.org    | 6501234234   | 1997-10-10 | 19     |   6500 | 100        | 5             |
| 192         | Sarah       | Bell      | sarah.bell@sqltutorial.org        | 6505011876   | 1996-02-04 | 17     |   4000 | 123        | 5             |
| 193         | Britney     | Everett   | britney.everett@sqltutorial.org   | 6505012876   | 1997-03-03 | 17     |   3900 | 123        | 5             |
| 103         | Alexander   | Hunold    | alexander.hunold@sqltutorial.org  | 5904234567   | 1990-01-03 | 9      |   9000 | 102        | 6             |
| 104         | Bruce       | Ernst     | bruce.ernst@sqltutorial.org       | 5904234568   | 1991-05-21 | 9      |   6000 | 103        | 6             |
| 105         | David       | Austin    | david.austin@sqltutorial.org      | 5904234569   | 1997-06-25 | 9      |   4800 | 103        | 6             |
| 106         | Valli       | Pataballa | valli.pataballa@sqltutorial.org   | 5904234560   | 1998-02-05 | 9      |   4800 | 103        | 6             |
| 100         | Steven      | King      | steven.king@sqltutorial.org       | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
+-------------+-------------+-----------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
22 rows in set (0.00 sec)




8. Finds all employees whose salaries are greater than or equal to the highest salary of
every department.

mysql> SELECT e.* FROM employees e JOIN ( SELECT department_id, MAX(salary) as max_salary FROM employees GROUP BY department_id) AS dept_max_salary ON e.department_id = dept_max_salary.department_id WHERE e.salary >= dept_max_salary.max_salary;
+-------------+------------+-----------+----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name | last_name | email                            | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+------------+-----------+----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 200         | Jennifer   | Whalen    | jennifer.whalen@sqltutorial.org  | 5151234444   | 1987-09-17 | 3      |   4400 | 101        | 1             |
| 108         | Nancy      | Greenberg | nancy.greenberg@sqltutorial.org  | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 205         | Shelley    | Higgins   | shelley.higgins@sqltutorial.org  | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
| 114         | Den        | Raphaely  | den.raphaely@sqltutorial.org     | 5151274561   | 1994-12-07 | 14     |  11000 | 100        | 3             |
| 203         | Susan      | Mavris    | susan.mavris@sqltutorial.org     | 5151237777   | 1994-06-07 | 8      |   6500 | 101        | 4             |
| 121         | Adam       | Fripp     | adam.fripp@sqltutorial.org       | 6501232234   | 1997-04-10 | 19     |   8200 | 100        | 5             |
| 103         | Alexander  | Hunold    | alexander.hunold@sqltutorial.org | 5904234567   | 1990-01-03 | 9      |   9000 | 102        | 6             |
| 204         | Hermann    | Baer      | hermann.baer@sqltutorial.org     | 5151238888   | 1994-06-07 | 12     |  10000 | 101        | 7             |
| 100         | Steven     | King      | steven.king@sqltutorial.org      | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
+-------------+------------+-----------+----------------------------------+--------------+------------+--------+--------+------------+---------------+
9 rows in set (0.00 sec)



9. Calculate the average of average salary of departments. (Hint: SQL subquery in the
FROM clause)


mysql> SELECT AVG(dept_avg_salary) AS overall_avg_salary FROM (SELECT department_id, AVG(salary) AS dept_avg_salary FROM employees GROUP BY department_id) AS dept_avg_salary_subquery;
+--------------------+
| overall_avg_salary |
+--------------------+
|      8308.78306667 |
+--------------------+
1 row in set (0.00 sec)





10. Finds the salaries of all employees, their average salary, and the difference between the
salary of each employee and the average salary. (Hint: SQL Subquery in the SELECT
clause)


mysql> SELECT employee_id, first_name, last_name, salary, (SELECT ROUND(AVG(salary), 0) FROM employees) average_salary, salary -(SELECT ROUND(AVG(salary), 0)FROM employees)difference FROM employees ORDER BY first_name , last_name;
+-------------+-------------+-------------+--------+----------------+------------+
| employee_id | first_name  | last_name   | salary | average_salary | difference |
+-------------+-------------+-------------+--------+----------------+------------+
| 121         | Adam        | Fripp       |   8200 |           7678 |        522 |
| 103         | Alexander   | Hunold      |   9000 |           7678 |       1322 |
| 115         | Alexander   | Khoo        |   3100 |           7678 |      -4578 |
| 193         | Britney     | Everett     |   3900 |           7678 |      -3778 |
| 104         | Bruce       | Ernst       |   6000 |           7678 |      -1678 |
| 109         | Daniel      | Faviet      |   9000 |           7678 |       1322 |
| 105         | David       | Austin      |   4800 |           7678 |      -2878 |
| 114         | Den         | Raphaely    |  11000 |           7678 |       3322 |
| 107         | Diana       | Lorentz     |   4200 |           7678 |      -3478 |
| 118         | Guy         | Himuro      |   2600 |           7678 |      -5078 |
| 204         | Hermann     | Baer        |  10000 |           7678 |       2322 |
| 126         | Irene       | Mikkilineni |   2700 |           7678 |      -4978 |
| 111         | Ismael      | Sciarra     |   7700 |           7678 |         22 |
| 200         | Jennifer    | Whalen      |   4400 |           7678 |      -3278 |
| 110         | John        | Chen        |   8200 |           7678 |        522 |
| 112         | Jose Manuel | Urman       |   7800 |           7678 |        122 |
| 119         | Karen       | Colmenares  |   2500 |           7678 |      -5178 |
| 102         | Lex         | De Haan     |  17000 |           7678 |       9322 |
| 113         | Luis        | Popp        |   6900 |           7678 |       -778 |
| 120         | Matthew     | Weiss       |   8000 |           7678 |        322 |
| 108         | Nancy       | Greenberg   |  12000 |           7678 |       4322 |
| 101         | Neena       | Kochhar     |  17000 |           7678 |       9322 |
| 122         | Payam       | Kaufling    |   7900 |           7678 |        222 |
| 192         | Sarah       | Bell        |   4000 |           7678 |      -3678 |
| 123         | Shanta      | Vollman     |   6500 |           7678 |      -1178 |
| 205         | Shelley     | Higgins     |  12000 |           7678 |       4322 |
| 116         | Shelli      | Baida       |   2900 |           7678 |      -4778 |
| 117         | Sigal       | Tobias      |   2800 |           7678 |      -4878 |
| 100         | Steven      | King        |  24000 |           7678 |      16322 |
| 203         | Susan       | Mavris      |   6500 |           7678 |      -1178 |
| 106         | Valli       | Pataballa   |   4800 |           7678 |      -2878 |
| 206         | William     | Gietz       |   8300 |           7678 |        622 |
+-------------+-------------+-------------+--------+----------------+------------+




11. Finds all employees whose salary is higher than the average salary of the employees in
their departments. (Hint : Use Correlated Subquery).


mysql> SELECT e.* FROM employees e WHERE e.salary > (SELECT AVG(e2.salary)
    -> FROM employees e2 WHERE e2.department_id = e.department_id);
+-------------+------------+-----------+----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name | last_name | email                            | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+------------+-----------+----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 100         | Steven     | King      | steven.king@sqltutorial.org      | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
| 103         | Alexander  | Hunold    | alexander.hunold@sqltutorial.org | 5904234567   | 1990-01-03 | 9      |   9000 | 102        | 6             |
| 104         | Bruce      | Ernst     | bruce.ernst@sqltutorial.org      | 5904234568   | 1991-05-21 | 9      |   6000 | 103        | 6             |
| 108         | Nancy      | Greenberg | nancy.greenberg@sqltutorial.org  | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 109         | Daniel     | Faviet    | daniel.faviet@sqltutorial.org    | 5151244169   | 1994-08-16 | 6      |   9000 | 108        | 10            |
| 114         | Den        | Raphaely  | den.raphaely@sqltutorial.org     | 5151274561   | 1994-12-07 | 14     |  11000 | 100        | 3             |
| 120         | Matthew    | Weiss     | matthew.weiss@sqltutorial.org    | 6501231234   | 1996-07-18 | 19     |   8000 | 100        | 5             |
| 121         | Adam       | Fripp     | adam.fripp@sqltutorial.org       | 6501232234   | 1997-04-10 | 19     |   8200 | 100        | 5             |
| 122         | Payam      | Kaufling  | payam.kaufling@sqltutorial.org   | 6501233234   | 1995-05-01 | 19     |   7900 | 100        | 5             |
| 123         | Shanta     | Vollman   | shanta.vollman@sqltutorial.org   | 6501234234   | 1997-10-10 | 19     |   6500 | 100        | 5             |
| 205         | Shelley    | Higgins   | shelley.higgins@sqltutorial.org  | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
+-------------+------------+-----------+----------------------------------+--------------+------------+--------+--------+------------+---------------+
11 rows in set (0.00 sec)



12. Returns all employees who have no dependents.


mysql> select * from employees where employee_id not in (select employee_id from dependents);
+-------------+------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name | last_name   | email                             | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 120         | Matthew    | Weiss       | matthew.weiss@sqltutorial.org     | 6501231234   | 1996-07-18 | 19     |   8000 | 100        | 5             |
| 121         | Adam       | Fripp       | adam.fripp@sqltutorial.org        | 6501232234   | 1997-04-10 | 19     |   8200 | 100        | 5             |
| 122         | Payam      | Kaufling    | payam.kaufling@sqltutorial.org    | 6501233234   | 1995-05-01 | 19     |   7900 | 100        | 5             |
| 123         | Shanta     | Vollman     | shanta.vollman@sqltutorial.org    | 6501234234   | 1997-10-10 | 19     |   6500 | 100        | 5             |
| 126         | Irene      | Mikkilineni | irene.mikkilineni@sqltutorial.org | 6501241224   | 1998-09-28 | 18     |   2700 | 120        | 5             |
| 192         | Sarah      | Bell        | sarah.bell@sqltutorial.org        | 6505011876   | 1996-02-04 | 17     |   4000 | 123        | 5             |
| 193         | Britney    | Everett     | britney.everett@sqltutorial.org   | 6505012876   | 1997-03-03 | 17     |   3900 | 123        | 5             |
+-------------+------------+-------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
7 rows in set (0.01 sec)


13. Display first name, last name, department name of employees of the Department with
id 1, 2 and 3.

mysql> select e.first_name,e.last_name,d.department_name from employees e JOIN
    -> departments d ON e.department_id=d.department_id where e.department_id IN
    -> ('1','2','3');
+------------+------------+-----------------+
| first_name | last_name  | department_name |
+------------+------------+-----------------+
| Den        | Raphaely   | Purchasing      |
| Alexander  | Khoo       | Purchasing      |
| Shelli     | Baida      | Purchasing      |
| Sigal      | Tobias     | Purchasing      |
| Guy        | Himuro     | Purchasing      |
| Karen      | Colmenares | Purchasing      |
| Jennifer   | Whalen     | Administration  |
+------------+------------+-----------------+
7 rows in set (0.00 sec)



14. Display the first name, last name, job title, and department name of employees who
work in department with id 1, 2, and 3 and salary greater than 10000.

mysql> select e.first_name,e.last_name,d.department_name,j.job_title from jobs j JOIN employees e ON j.job_id=e.job_id JOIN departments d ON e.department_id=d.department_id where e.department_id IN ('1','2','3') AND e.salary>10000;
+------------+-----------+-----------------+--------------------+
| first_name | last_name | department_name | job_title          |
+------------+-----------+-----------------+--------------------+
| Den        | Raphaely  | Purchasing      | Purchasing Manager |
+------------+-----------+-----------------+--------------------+
1 row in set (0.00 sec)




15. Display Department name, street address, postal code, country name and region name
of all departments.

mysql> SELECT d.department_name, l.street_adress, l.postal_code, c.country_name, r.region_name FROM departments d JOIN location l ON d.location_id=l.location_id JOIN countries c ON l.country_id = c.country_id JOIN regions r ON c.region_id = r.region_id;
+------------------+-----------------------+-------------+--------------------------+-------------+
| department_name  | street_adress         | postal_code | country_name             | region_name |
+------------------+-----------------------+-------------+--------------------------+-------------+
| IT               | 2014 Jabberwocky Rd   |       26192 | United States of America | Americas    |
| Shipping         | 2011 Interiors Blvd   |       99236 | United States of America | Americas    |
| Administration   | 2004 Charade Rd       |       98199 | United States of America | Americas    |
| Finance          | 2004 Charade Rd       |       98199 | United States of America | Americas    |
| Accounting       | 2004 Charade Rd       |       98199 | United States of America | Americas    |
| Purchasing       | 2004 Charade Rd       |       98199 | United States of America | Americas    |
| Executive        | 2004 Charade Rd       |       98199 | United States of America | Americas    |
| Human Resources  | 8204 Arthur St        |        NULL | United Kingdom           | Europe      |
| Public Relations | Schwanthalerstr. 7031 |       80925 | Germany                  | Europe      |
+------------------+-----------------------+-------------+--------------------------+-------------+
9 rows in set (0.00 sec)




16. Write a SQL query to find out which employees have or do not have a department.
Return first name, last name, department ID, department name.

mysql> SELECT e.first_name, e.last_name, d.department_id, d.department_name
    -> FROM employees e LEFT JOIN departments d ON e.department_id =
    -> d.department_id;
+-------------+-------------+---------------+------------------+
| first_name  | last_name   | department_id | department_name  |
+-------------+-------------+---------------+------------------+
| Steven      | King        | 9             | Executive        |
| Neena       | Kochhar     | 9             | Executive        |
| Lex         | De Haan     | 9             | Executive        |
| Alexander   | Hunold      | 6             | IT               |
| Bruce       | Ernst       | 6             | IT               |
| David       | Austin      | 6             | IT               |
| Valli       | Pataballa   | 6             | IT               |
| Diana       | Lorentz     | 6             | IT               |
| Nancy       | Greenberg   | 10            | Finance          |
| Daniel      | Faviet      | 10            | Finance          |
| John        | Chen        | 10            | Finance          |
| Ismael      | Sciarra     | 10            | Finance          |
| Jose Manuel | Urman       | 10            | Finance          |
| Luis        | Popp        | 10            | Finance          |
| Den         | Raphaely    | 3             | Purchasing       |
| Alexander   | Khoo        | 3             | Purchasing       |
| Shelli      | Baida       | 3             | Purchasing       |
| Sigal       | Tobias      | 3             | Purchasing       |
| Guy         | Himuro      | 3             | Purchasing       |
| Karen       | Colmenares  | 3             | Purchasing       |
| Matthew     | Weiss       | 5             | Shipping         |
| Adam        | Fripp       | 5             | Shipping         |
| Payam       | Kaufling    | 5             | Shipping         |
| Shanta      | Vollman     | 5             | Shipping         |
| Irene       | Mikkilineni | 5             | Shipping         |
| Sarah       | Bell        | 5             | Shipping         |
| Britney     | Everett     | 5             | Shipping         |
| Jennifer    | Whalen      | 1             | Administration   |
| Susan       | Mavris      | 4             | Human Resources  |
| Hermann     | Baer        | 7             | Public Relations |
| Shelley     | Higgins     | 11            | Accounting       |
| William     | Gietz       | 11            | Accounting       |
+-------------+-------------+---------------+------------------+
32 rows in set (0.00 sec)



17. Write a SQL query to find those employees whose first name contains the letter ‘Z’.
Return first name, last name, department, city, and state province.

mysql> SELECT e.first_name, e.last_name, d.department_name, l.city,
    -> l.state_province FROM employees e JOIN departments d ON e.department_id =
    -> d.department_id JOIN location l ON d.location_id=l.location_id WHERE e.first_name
    -> LIKE '%Z%';
Empty set (0.00 sec)



18. Write a SQL query to find all departments, including those without employees Return
first name, last name, department ID, department name

mysql> SELECT e.first_name, e.last_name, d.department_id, d.department_name
    -> FROM departments d LEFT JOIN employees e ON d.department_id =
    -> e.department_id;
+-------------+-------------+---------------+------------------+
| first_name  | last_name   | department_id | department_name  |
+-------------+-------------+---------------+------------------+
| Jennifer    | Whalen      | 1             | Administration   |
| Nancy       | Greenberg   | 10            | Finance          |
| Daniel      | Faviet      | 10            | Finance          |
| John        | Chen        | 10            | Finance          |
| Ismael      | Sciarra     | 10            | Finance          |
| Jose Manuel | Urman       | 10            | Finance          |
| Luis        | Popp        | 10            | Finance          |
| Shelley     | Higgins     | 11            | Accounting       |
| William     | Gietz       | 11            | Accounting       |
| Den         | Raphaely    | 3             | Purchasing       |
| Alexander   | Khoo        | 3             | Purchasing       |
| Shelli      | Baida       | 3             | Purchasing       |
| Sigal       | Tobias      | 3             | Purchasing       |
| Guy         | Himuro      | 3             | Purchasing       |
| Karen       | Colmenares  | 3             | Purchasing       |
| Susan       | Mavris      | 4             | Human Resources  |
| Matthew     | Weiss       | 5             | Shipping         |
| Adam        | Fripp       | 5             | Shipping         |
| Payam       | Kaufling    | 5             | Shipping         |
| Shanta      | Vollman     | 5             | Shipping         |
| Irene       | Mikkilineni | 5             | Shipping         |
| Sarah       | Bell        | 5             | Shipping         |
| Britney     | Everett     | 5             | Shipping         |
| Alexander   | Hunold      | 6             | IT               |
| Bruce       | Ernst       | 6             | IT               |
| David       | Austin      | 6             | IT               |
| Valli       | Pataballa   | 6             | IT               |
| Diana       | Lorentz     | 6             | IT               |
| Hermann     | Baer        | 7             | Public Relations |
| Steven      | King        | 9             | Executive        |
| Neena       | Kochhar     | 9             | Executive        |
| Lex         | De Haan     | 9             | Executive        |
+-------------+-------------+---------------+------------------+
32 rows in set (0.00 sec)


19. Write a SQL query to find the employees and their managers. . Those managers do not
work under any manager also appear in the list. Return the first name of the employee
and manager.

mysql> SELECT e.first_name AS employee_first_name, m.first_name AS
    -> manager_first_name FROM employees e LEFT JOIN employees m ON
    -> e.manager_id = m.employee_id;
+---------------------+--------------------+
| employee_first_name | manager_first_name |
+---------------------+--------------------+
| Steven              | NULL               |
| Neena               | Steven             |
| Lex                 | Steven             |
| Alexander           | Lex                |
| Bruce               | Alexander          |
| David               | Alexander          |
| Valli               | Alexander          |
| Diana               | Alexander          |
| Nancy               | Neena              |
| Daniel              | Nancy              |
| John                | Nancy              |
| Ismael              | Nancy              |
| Jose Manuel         | Nancy              |
| Luis                | Nancy              |
| Den                 | Steven             |
| Alexander           | Den                |
| Shelli              | Den                |
| Sigal               | Den                |
| Guy                 | Den                |
| Karen               | Den                |
| Matthew             | Steven             |
| Adam                | Steven             |
| Payam               | Steven             |
| Shanta              | Steven             |
| Irene               | Matthew            |
| Sarah               | Shanta             |
| Britney             | Shanta             |
| Jennifer            | Neena              |
| Susan               | Neena              |
| Hermann             | Neena              |
| Shelley             | Neena              |
| William             | Shelley            |
+---------------------+--------------------+
32 rows in set (0.00 sec)


20. Write a SQL query to find the employees who work in the same department as the
employee with the last name Taylor. Return first name, last name and department ID.


mysql> SELECT e.first_name, e.last_name, e.department_id FROM employees e
    -> INNER JOIN employees t ON e.department_id = t.department_id WHERE
    -> t.last_name = 'Taylor';
Empty set (0.00 sec)


21. Write a SQL query to calculate the difference between the maximum salary of the job
and the employee's salary. Return job title, employee name, and salary difference.

mysql> SELECT j.job_title, CONCAT(e.first_name, ' ', e.last_name) AS
    -> employee_name, (j.max_salary - e.salary) AS salary_difference FROM employees e
    -> INNER JOIN jobs j ON e.job_id = j.job_id;
+---------------------------------+-------------------+-------------------+
| job_title                       | employee_name     | salary_difference |
+---------------------------------+-------------------+-------------------+
| President                       | Steven King       |             16000 |
| Administration Vice President   | Neena Kochhar     |             13000 |
| Administration Vice President   | Lex De Haan       |             13000 |
| Programmer                      | Alexander Hunold  |              1000 |
| Programmer                      | Bruce Ernst       |              4000 |
| Programmer                      | David Austin      |              5200 |
| Programmer                      | Valli Pataballa   |              5200 |
| Programmer                      | Diana Lorentz     |              5800 |
| Finance Manager                 | Nancy Greenberg   |              4000 |
| Accountant                      | Daniel Faviet     |                 0 |
| Accountant                      | John Chen         |               800 |
| Accountant                      | Ismael Sciarra    |              1300 |
| Accountant                      | Jose Manuel Urman |              1200 |
| Accountant                      | Luis Popp         |              2100 |
| Purchasing Manager              | Den Raphaely      |              4000 |
| Purchasing Clerk                | Alexander Khoo    |              2400 |
| Purchasing Clerk                | Shelli Baida      |              2600 |
| Purchasing Clerk                | Sigal Tobias      |              2700 |
| Purchasing Clerk                | Guy Himuro        |              2900 |
| Purchasing Clerk                | Karen Colmenares  |              3000 |
| Stock Manager                   | Matthew Weiss     |               500 |
| Stock Manager                   | Adam Fripp        |               300 |
| Stock Manager                   | Payam Kaufling    |               600 |
| Stock Manager                   | Shanta Vollman    |              2000 |
| Stock Clerk                     | Irene Mikkilineni |              2300 |
| Shipping Clerk                  | Sarah Bell        |              1500 |
| Shipping Clerk                  | Britney Everett   |              1600 |
| Administration Assistant        | Jennifer Whalen   |              1600 |
| Human Resources Representative  | Susan Mavris      |              2500 |
| Public Relations Representative | Hermann Baer      |               500 |
| Accounting Manager              | Shelley Higgins   |              4000 |
| Public Accountant               | William Gietz     |               700 |
+---------------------------------+-------------------+-------------------+
32 rows in set (0.00 sec)



22. Write a SQL query to calculate the average salary, the number of employees receiving
commissions in that department. Return department name, average salary and number
of employees of all departments.

mysql> SELECT d.department_name AS department_name, AVG(e.salary) AS
    -> average_salary, COUNT(e.department_id) AS number_of_employees FROM
    -> departments d LEFT JOIN employees e ON d.department_id = e.department_id
    -> GROUP BY d.department_name;
+------------------+----------------+---------------------+
| department_name  | average_salary | number_of_employees |
+------------------+----------------+---------------------+
| Accounting       |     10150.0000 |                   2 |
| Administration   |      4400.0000 |                   1 |
| Executive        |     19333.3333 |                   3 |
| Finance          |      8600.0000 |                   6 |
| Human Resources  |      6500.0000 |                   1 |
| IT               |      5760.0000 |                   5 |
| Public Relations |     10000.0000 |                   1 |
| Purchasing       |      4150.0000 |                   6 |
| Shipping         |      5885.7143 |                   7 |
+------------------+----------------+---------------------+
9 rows in set (0.00 sec)


23. Create a view which contains employee name, employee id, phone number, job title,
department name, manager name of employees belongs to department whose
location is in ‘Delhi’ and display the details,


mysql> CREATE VIEW v_employee_details AS SELECT e.first_name, e.last_name, e.employee_id, e.phone_number, j.job_title, d.department_name, CONCAT(m.first_name, ' ', m.last_name) AS manager_name FROM employees e INNER JOIN jobs j ON e.job_id = j.job_id INNER JOIN departments d ON e.department_id = d.department_id LEFT JOIN employees m ON e.manager_id = m.employee_id WHERE d.location_id IN (SELECT location_id FROM location WHERE city = 'DELHI');
Query OK, 0 rows affected (0.01 sec)

mysql> select * from v_employee_details;                                                                                                                                Empty set (0.00 sec)


24. Use the above created view to obtain the names of employees whose job title is
‘Manager’ and department is ‘Finance’.

mysql> SELECT first_name, last_name FROM v_employee_details WHERE job_title =
    -> 'Manager' AND department_name = 'Finance';
Empty set (0.00 sec)


25. Check whether it is possible to update the phone number of employee whose first
name is ‘Smith’ by using the above created view.

mysql> UPDATE v_employee_details SET phone_number = 6985741230 WHERE first_name = 'Smith';
ERROR 1288 (HY000): The target table v_employee_details of the UPDATE is not updatable
mysql> 



Note: It is not possible to update the data from multiple table view in MySQL. It is
possible in MariaDB. Only the Single table view can be updated in MySQL.



26. Display the details of employee who have no dependents.

mysql> SELECT e.employee_id, e.first_name, e.last_name, e.phone_number FROM
    -> employees e LEFT JOIN dependents dep ON e.employee_id = dep.employee_id
    -> WHERE dep.employee_id IS NULL;
+-------------+------------+-------------+--------------+
| employee_id | first_name | last_name   | phone_number |
+-------------+------------+-------------+--------------+
| 120         | Matthew    | Weiss       | 6501231234   |
| 121         | Adam       | Fripp       | 6501232234   |
| 122         | Payam      | Kaufling    | 6501233234   |
| 123         | Shanta     | Vollman     | 6501234234   |
| 126         | Irene      | Mikkilineni | 6501241224   |
| 192         | Sarah      | Bell        | 6505011876   |
| 193         | Britney    | Everett     | 6505012876   |
+-------------+------------+-------------+--------------+
7 rows in set (0.00 sec)


27. Display the details of employee who manager id is 101 or 201. (Use Union Clause)

mysql> select * from employees where manager_id = '101' UNION select * from
    -> employees where manager_id='201';
+-------------+------------+-----------+---------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name | last_name | email                           | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+------------+-----------+---------------------------------+--------------+------------+--------+--------+------------+---------------+
| 108         | Nancy      | Greenberg | nancy.greenberg@sqltutorial.org | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 200         | Jennifer   | Whalen    | jennifer.whalen@sqltutorial.org | 5151234444   | 1987-09-17 | 3      |   4400 | 101        | 1             |
| 203         | Susan      | Mavris    | susan.mavris@sqltutorial.org    | 5151237777   | 1994-06-07 | 8      |   6500 | 101        | 4             |
| 204         | Hermann    | Baer      | hermann.baer@sqltutorial.org    | 5151238888   | 1994-06-07 | 12     |  10000 | 101        | 7             |
| 205         | Shelley    | Higgins   | shelley.higgins@sqltutorial.org | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
+-------------+------------+-----------+---------------------------------+--------------+------------+--------+--------+------------+---------------+
5 rows in set (0.00 sec)


28. Display the details of employees who have at least one dependent.

mysql> select * from employees where employee_id in (select distinct(employee_id) from dependents);
+-------------+-------------+------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| employee_id | first_name  | last_name  | email                             | phone_number | hire_date  | job_id | salary | manager_id | department_id |
+-------------+-------------+------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
| 100         | Steven      | King       | steven.king@sqltutorial.org       | 5151234567   | 1987-06-17 | 4      |  24000 | NULL       | 9             |
| 101         | Neena       | Kochhar    | neena.kochhar@sqltutorial.org     | 5151234568   | 1989-09-21 | 5      |  17000 | 100        | 9             |
| 102         | Lex         | De Haan    | lex.de haan@sqltutorial.org       | 5151234569   | 1993-01-13 | 5      |  17000 | 100        | 9             |
| 103         | Alexander   | Hunold     | alexander.hunold@sqltutorial.org  | 5904234567   | 1990-01-03 | 9      |   9000 | 102        | 6             |
| 104         | Bruce       | Ernst      | bruce.ernst@sqltutorial.org       | 5904234568   | 1991-05-21 | 9      |   6000 | 103        | 6             |
| 105         | David       | Austin     | david.austin@sqltutorial.org      | 5904234569   | 1997-06-25 | 9      |   4800 | 103        | 6             |
| 106         | Valli       | Pataballa  | valli.pataballa@sqltutorial.org   | 5904234560   | 1998-02-05 | 9      |   4800 | 103        | 6             |
| 107         | Diana       | Lorentz    | diana.lorentz@sqltutorial.org     | 5904235567   | 1999-02-07 | 9      |   4200 | 103        | 6             |
| 108         | Nancy       | Greenberg  | nancy.greenberg@sqltutorial.org   | 5151244569   | 1994-08-17 | 7      |  12000 | 101        | 10            |
| 109         | Daniel      | Faviet     | daniel.faviet@sqltutorial.org     | 5151244169   | 1994-08-16 | 6      |   9000 | 108        | 10            |
| 110         | John        | Chen       | john.chen@sqltutorial.org         | 5151244269   | 1997-09-28 | 6      |   8200 | 108        | 10            |
| 111         | Ismael      | Sciarra    | ismael.sciarra@sqltutorial.org    | 5151244369   | 1997-09-30 | 6      |   7700 | 108        | 10            |
| 112         | Jose Manuel | Urman      | jose manuel.urman@sqltutorial.org | 5151244469   | 1998-03-07 | 6      |   7800 | 108        | 10            |
| 113         | Luis        | Popp       | luis.popp@sqltutorial.org         | 5151244567   | 1999-12-07 | 6      |   6900 | 108        | 10            |
| 114         | Den         | Raphaely   | den.raphaely@sqltutorial.org      | 5151274561   | 1994-12-07 | 14     |  11000 | 100        | 3             |
| 115         | Alexander   | Khoo       | alexander.khoo@sqltutorial.org    | 5151274562   | 1995-05-18 | 13     |   3100 | 114        | 3             |
| 116         | Shelli      | Baida      | shelli.baida@sqltutorial.org      | 5151274563   | 1997-12-24 | 13     |   2900 | 114        | 3             |
| 117         | Sigal       | Tobias     | sigal.tobias@sqltutorial.org      | 5151274564   | 1997-07-24 | 13     |   2800 | 114        | 3             |
| 118         | Guy         | Himuro     | guy.himuro@sqltutorial.org        | 5151274565   | 1998-11-15 | 13     |   2600 | 114        | 3             |
| 119         | Karen       | Colmenares | karen.colmenares@sqltutorial.org  | 5151274566   | 1999-08-10 | 13     |   2500 | 114        | 3             |
| 200         | Jennifer    | Whalen     | jennifer.whalen@sqltutorial.org   | 5151234444   | 1987-09-17 | 3      |   4400 | 101        | 1             |
| 203         | Susan       | Mavris     | susan.mavris@sqltutorial.org      | 5151237777   | 1994-06-07 | 8      |   6500 | 101        | 4             |
| 204         | Hermann     | Baer       | hermann.baer@sqltutorial.org      | 5151238888   | 1994-06-07 | 12     |  10000 | 101        | 7             |
| 205         | Shelley     | Higgins    | shelley.higgins@sqltutorial.org   | 5151238080   | 1994-06-07 | 2      |  12000 | 101        | 11            |
| 206         | William     | Gietz      | william.gietz@sqltutorial.org     | 5151238181   | 1994-06-07 | 1      |   8300 | 205        | 11            |
+-------------+-------------+------------+-----------------------------------+--------------+------------+--------+--------+------------+---------------+
25 rows in set (0.00 sec)







